FROM balenalib/jetson-nano-ubuntu:bionic

WORKDIR /usr/src/app

#OpenDataCam 3.0.1

ENV DEBIAN_FRONTEND noninteractive

# Add JetPack 4.3 packages
RUN \
  echo "deb [trusted=yes] https://repo.download.nvidia.com/jetson/common r32 main" | tee -a /etc/apt/sources.list && \
  echo "deb [trusted=yes] https://repo.download.nvidia.com/jetson/t210 r32 main" | tee -a /etc/apt/sources.list && \
  apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc && \
  apt-get update
  
# Install some utils
RUN apt-get install -y lbzip2 git wget unzip jq

# Install CUDA/cuDNN 
RUN apt-get install -y cuda-toolkit-10-0 libcudnn7 libcudnn7-dev

# Set paths
ENV CUDA_HOME=/usr/local/cuda-10.0
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:/usr/lib/aarch64-linux-gnu/lapack
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV UDEV=1
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
ENV LAPACK=/usr/lib/aarch64-linux-gnu/lapack/liblapack.so

# Get drivers and install
RUN \
  wget https://developer.nvidia.com/embedded/L4T/r32_Release_v4.3/t210ref_release_aarch64/Tegra210_Linux_R32.4.3_aarch64.tbz2 && \
  tar xjf Linux_for_Tegra/nv_tegra/nvidia_drivers.tbz2 -C && \
  tar xjf Linux_for_Tegra/nv_tegra/config.tbz2 -C / --exclude=etc/hosts --exclude=etc/hostname && \
  echo "/usr/lib/aarch64-linux-gnu/tegra" > /etc/ld.so.conf.d/nvidia-tegra.conf && \
  echo "/usr/local/cuda-10.0/targets/aarch64-linux/lib" > /etc/ld.so.conf.d/cuda-10-0.conf && \
  ldconfig && \
  rm -f Tegra210_Linux_R32.4.3_aarch64.tbz2
  
# Build and install OpenCV 4.1.1
# prerequisites:
RUN \
  apt-get install -y libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
  gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
  pkg-config zlib1g-dev libwebp-dev libtbb2 libtbb-dev libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev cmake libv4l-dev
  
RUN \
  git clone --depth 1 -b 4.1.1 https://github.com/opencv/opencv.git && \
  cd opencv && \
  mkdir build && \
  cd build && \
  cmake -D CMAKE_INSTALL_PREFIX=/usr/local CMAKE_BUILD_TYPE=Release -D WITH_GSTREAMER=ON -D WITH_GSTREAMER_0_10=OFF \
  -D WITH_CUDA=OFF -D WITH_TBB=ON -D WITH_LIBV4L=ON WITH_FFMPEG=ON -DOPENCV_GENERATE_PKGCONFIG=ON .. && \
  make install && \
  /bin/bash -c 'echo "/usr/local/lib" > /etc/ld.so.conf.d/opencv.conf' && \
  ldconfig
  
# Start Darknet Install

WORKDIR /

RUN \
  git clone --depth 1 -b odc https://github.com/opendatacam/darknet && \
  cd darknet
  
COPY ./Makefile.jetson-nano ./Makefile

RUN make

#get weights
RUN wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v4_pre/yolov4-tiny.weights --no-check-certificate > /dev/null 2>&1

# Get and install OpenDataCam
# first install node.js
RUN \
  curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
  apt-get install -y nodejs

RUN \
  git clone --depth 1 https://github.com/opendatacam/opendatacam.git /var/local/opendatacam && \
  cd /var/local/opendatacam && \
  npm install && \
  npm run build

EXPOSE 8080 8070 8090

COPY config.jetson-nano config.bak

COPY launch.sh launch.sh
RUN chmod 777 launch.sh
CMD ["./launch.sh"]
